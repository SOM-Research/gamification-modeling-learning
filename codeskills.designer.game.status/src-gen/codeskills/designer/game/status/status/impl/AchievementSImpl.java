/**
 * generated by Xtext 2.10.0
 */
package codeskills.designer.game.status.status.impl;

import codeskills.designer.game.game.Achievement;

import codeskills.designer.game.status.status.AchievementS;
import codeskills.designer.game.status.status.StatusPackage;
import codeskills.designer.game.status.status.TaskS;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Achievement S</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link codeskills.designer.game.status.status.impl.AchievementSImpl#getAchievement <em>Achievement</em>}</li>
 *   <li>{@link codeskills.designer.game.status.status.impl.AchievementSImpl#getTasks <em>Tasks</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AchievementSImpl extends SImpl implements AchievementS
{
  /**
   * The cached value of the '{@link #getAchievement() <em>Achievement</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAchievement()
   * @generated
   * @ordered
   */
  protected Achievement achievement;

  /**
   * The cached value of the '{@link #getTasks() <em>Tasks</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTasks()
   * @generated
   * @ordered
   */
  protected EList<TaskS> tasks;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AchievementSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StatusPackage.Literals.ACHIEVEMENT_S;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Achievement getAchievement()
  {
    if (achievement != null && achievement.eIsProxy())
    {
      InternalEObject oldAchievement = (InternalEObject)achievement;
      achievement = (Achievement)eResolveProxy(oldAchievement);
      if (achievement != oldAchievement)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StatusPackage.ACHIEVEMENT_S__ACHIEVEMENT, oldAchievement, achievement));
      }
    }
    return achievement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Achievement basicGetAchievement()
  {
    return achievement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAchievement(Achievement newAchievement)
  {
    Achievement oldAchievement = achievement;
    achievement = newAchievement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatusPackage.ACHIEVEMENT_S__ACHIEVEMENT, oldAchievement, achievement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TaskS> getTasks()
  {
    if (tasks == null)
    {
      tasks = new EObjectContainmentEList<TaskS>(TaskS.class, this, StatusPackage.ACHIEVEMENT_S__TASKS);
    }
    return tasks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StatusPackage.ACHIEVEMENT_S__TASKS:
        return ((InternalEList<?>)getTasks()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StatusPackage.ACHIEVEMENT_S__ACHIEVEMENT:
        if (resolve) return getAchievement();
        return basicGetAchievement();
      case StatusPackage.ACHIEVEMENT_S__TASKS:
        return getTasks();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StatusPackage.ACHIEVEMENT_S__ACHIEVEMENT:
        setAchievement((Achievement)newValue);
        return;
      case StatusPackage.ACHIEVEMENT_S__TASKS:
        getTasks().clear();
        getTasks().addAll((Collection<? extends TaskS>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StatusPackage.ACHIEVEMENT_S__ACHIEVEMENT:
        setAchievement((Achievement)null);
        return;
      case StatusPackage.ACHIEVEMENT_S__TASKS:
        getTasks().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StatusPackage.ACHIEVEMENT_S__ACHIEVEMENT:
        return achievement != null;
      case StatusPackage.ACHIEVEMENT_S__TASKS:
        return tasks != null && !tasks.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AchievementSImpl
