import 'http://www.designer.codeskills/data/Data'
import 'http://www.eclipse.org/uml2/5.0.0/UML'
import SCHEMA : 'http:///org/eclipse/datatools/modelbase/sql/schema.ecore'
import SQL : 'http:///org/eclipse/datatools/modelbase/sql/query/SQLQueryModel.ecore'

package data

context Project

inv simpleselect:
	files->select(f | f.ext.toLower() = 'sql' and f.model->notEmpty()).model->selectByKind(SQL::QuerySelectStatement)
			.queryExpr.query->selectByKind(SQL::QuerySelect)->exists(q | 
				q.columnList->isEmpty() and 
				q.fromClause->exists(tr | tr.name.toLower() = 'commit') and 
				q.whereClause->isEmpty() and 
				q.groupByClause->isEmpty())
				
inv simplefilter:
	files->select(f | f.ext.toLower() = 'sql' and f.model->notEmpty()).model->selectByKind(SQL::QuerySelectStatement)
			.queryExpr.query->selectByKind(SQL::QuerySelect)->exists(q | 
				q.fromClause->exists(tr | tr.name.toLower() = 'commit') 
				and q.whereClause->selectByKind(SQL::PredicateBasic)->exists(pb | pb.rightValueExpr->selectByKind(SQL::ValueExpressionSimple)->exists(rv | rv.value = '0') and
																				  pb.leftValueExpr->selectByKind(SQL::ValueExpressionFunction)->exists(f | f.name.toLower() = 'weekday' and 
																				  																		   f.parameterList->size() = 1 and 
																				  																		   f.parameterList->exists(pl | pl.name.toLower() = 'committed_date' or pl.name.toLower() = 'authored_date'))
				)
				and q.groupByClause->isEmpty())	
				
inv createumlfile:
	files->select(f | f.name.toLower() = 'myfirstmodel.uml' and f.model->notEmpty())->notEmpty()
	

inv simplediagram:
	files->select(f | f.name.toLower() = 'myfirstmodel.uml' and f.model->notEmpty()).model->selectByKind(UML::Model).allOwnedElements()->selectByKind(UML::Class)
    		->exists(c | c.name.toLower() = 'repository' and 
    			         c.ownedAttribute->size() = 1 and
    			         c.ownedAttribute->exists(p | p.name.toLower() = 'name')
    		) and
    files->select(f | f.name.toLower() = 'myfirstmodel.uml' and f.model->notEmpty()).model->selectByKind(UML::Model).allOwnedElements()->selectByKind(UML::Class)
    		->exists(c | c.name.toLower() = 'reference' and 
    			         c.ownedAttribute->size() = 1 and
    			         c.ownedAttribute->exists(p | p.name.toLower() = 'name')
    		)
				
inv join:
	files->select(f | f.ext.toLower() = 'sql' and f.model->notEmpty()).model->selectByKind(SQL::QuerySelectStatement)
			.queryExpr.query->selectByKind(SQL::QuerySelect)->exists(q | 
				q.fromClause->selectByKind(SQL::TableJoined)->exists(tj | (tj.tableRefLeft.name.toLower() = 'commit' and tj.tableRefRight.name.toLower() = 'file_modification') 
																		  or
																		  (tj.tableRefLeft.name.toLower() = 'file_modification' and tj.tableRefRight.name.toLower() = 'commit')															
																	) and
				q.whereClause->isEmpty() and 
				q.groupByClause->isEmpty()
			)
			
inv groupby:	
	files->select(f | f.ext.toLower() = 'sql' and f.model->notEmpty()).model->selectByKind(SQL::QuerySelectStatement)
			.queryExpr.query->selectByKind(SQL::QuerySelect)->exists(q | 
				q.selectClause->size() = 2 and
				q.selectClause->selectByKind(SQL::ResultColumn).valueExpr->selectByKind(SQL::ValueExpressionColumn)->exists(expr | expr.name.toLower() = 'author_id') and
				q.selectClause->selectByKind(SQL::ResultColumn).valueExpr->selectByKind(SQL::ValueExpressionFunction)->exists(expr | expr.name.toLower() = 'count' and expr.parameterList->exists(pl | pl.name.toLower() = 'file_id')) 
				and
				q.fromClause->selectByKind(SQL::TableJoined)->exists(tj | (tj.tableRefLeft.name.toLower() = 'commit' and tj.tableRefRight.name.toLower() = 'file_modification') 
																		  or
																		  (tj.tableRefLeft.name.toLower() = 'file_modification' and tj.tableRefRight.name.toLower() = 'commit')	
																	) and
				q.whereClause->isEmpty() and 
				q.groupByClause->size() = 1 and
				q.groupByClause->selectByKind(SQL::GroupingExpression).valueExpr->exists(expr | expr.name.toLower() = 'author_id')
			)
			
inv association:
    files->select(f | f.name.toLower() = 'myfirstmodel.uml' and f.model->notEmpty()).model->selectByKind(UML::Model).allOwnedElements()->selectByKind(UML::Association)
    	->exists(a | a.memberEnd->exists(m1, m2 | m1.upperValue.oclIsTypeOf(UML::LiteralUnlimitedNatural) and 
    										(m1.lowerValue.oclIsTypeOf(UML::LiteralInteger) implies m1.lowerValue.integerValue() = 1) and
    										 m1.type.name.toLower() = 'reference' and m2.type.name.toLower() = 'repository')
    			)
    			
inv generalization:
    files->select(f | f.name.toLower() = 'myfirstmodel.uml' and f.model->notEmpty()).model->selectByKind(UML::Model).allOwnedElements()->selectByKind(UML::Class)
    	->exists(c1, c2 |  c1.name.toLower() = 'branch' and c2.name.toLower() = 'tag' and 
    					   c1.superClass->exists(sc | sc.name.toLower() = 'reference') and 
    					   c2.superClass->exists(sc | sc.name.toLower() = 'reference')  
    	)
			
endpackage