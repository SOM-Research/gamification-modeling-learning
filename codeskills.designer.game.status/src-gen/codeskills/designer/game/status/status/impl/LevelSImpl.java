/**
 * generated by Xtext 2.10.0
 */
package codeskills.designer.game.status.status.impl;

import codeskills.designer.game.game.Level;

import codeskills.designer.game.status.status.GroupS;
import codeskills.designer.game.status.status.LevelS;
import codeskills.designer.game.status.status.StatusPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Level S</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link codeskills.designer.game.status.status.impl.LevelSImpl#getLevel <em>Level</em>}</li>
 *   <li>{@link codeskills.designer.game.status.status.impl.LevelSImpl#isIsCurrent <em>Is Current</em>}</li>
 *   <li>{@link codeskills.designer.game.status.status.impl.LevelSImpl#getGroups <em>Groups</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LevelSImpl extends SImpl implements LevelS
{
  /**
   * The cached value of the '{@link #getLevel() <em>Level</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLevel()
   * @generated
   * @ordered
   */
  protected Level level;

  /**
   * The default value of the '{@link #isIsCurrent() <em>Is Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsCurrent()
   * @generated
   * @ordered
   */
  protected static final boolean IS_CURRENT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsCurrent() <em>Is Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsCurrent()
   * @generated
   * @ordered
   */
  protected boolean isCurrent = IS_CURRENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getGroups() <em>Groups</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroups()
   * @generated
   * @ordered
   */
  protected EList<GroupS> groups;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LevelSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StatusPackage.Literals.LEVEL_S;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Level getLevel()
  {
    if (level != null && level.eIsProxy())
    {
      InternalEObject oldLevel = (InternalEObject)level;
      level = (Level)eResolveProxy(oldLevel);
      if (level != oldLevel)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StatusPackage.LEVEL_S__LEVEL, oldLevel, level));
      }
    }
    return level;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Level basicGetLevel()
  {
    return level;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLevel(Level newLevel)
  {
    Level oldLevel = level;
    level = newLevel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatusPackage.LEVEL_S__LEVEL, oldLevel, level));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIsCurrent()
  {
    return isCurrent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIsCurrent(boolean newIsCurrent)
  {
    boolean oldIsCurrent = isCurrent;
    isCurrent = newIsCurrent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatusPackage.LEVEL_S__IS_CURRENT, oldIsCurrent, isCurrent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GroupS> getGroups()
  {
    if (groups == null)
    {
      groups = new EObjectContainmentEList<GroupS>(GroupS.class, this, StatusPackage.LEVEL_S__GROUPS);
    }
    return groups;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StatusPackage.LEVEL_S__GROUPS:
        return ((InternalEList<?>)getGroups()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StatusPackage.LEVEL_S__LEVEL:
        if (resolve) return getLevel();
        return basicGetLevel();
      case StatusPackage.LEVEL_S__IS_CURRENT:
        return isIsCurrent();
      case StatusPackage.LEVEL_S__GROUPS:
        return getGroups();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StatusPackage.LEVEL_S__LEVEL:
        setLevel((Level)newValue);
        return;
      case StatusPackage.LEVEL_S__IS_CURRENT:
        setIsCurrent((Boolean)newValue);
        return;
      case StatusPackage.LEVEL_S__GROUPS:
        getGroups().clear();
        getGroups().addAll((Collection<? extends GroupS>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StatusPackage.LEVEL_S__LEVEL:
        setLevel((Level)null);
        return;
      case StatusPackage.LEVEL_S__IS_CURRENT:
        setIsCurrent(IS_CURRENT_EDEFAULT);
        return;
      case StatusPackage.LEVEL_S__GROUPS:
        getGroups().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StatusPackage.LEVEL_S__LEVEL:
        return level != null;
      case StatusPackage.LEVEL_S__IS_CURRENT:
        return isCurrent != IS_CURRENT_EDEFAULT;
      case StatusPackage.LEVEL_S__GROUPS:
        return groups != null && !groups.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (isCurrent: ");
    result.append(isCurrent);
    result.append(')');
    return result.toString();
  }

} //LevelSImpl
