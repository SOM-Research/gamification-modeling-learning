/*
 * generated by Xtext 2.10.0
 */
package codeskills.designer.data.serializer;

import codeskills.designer.data.data.DataPackage;
import codeskills.designer.data.data.File;
import codeskills.designer.data.data.Folder;
import codeskills.designer.data.data.Project;
import codeskills.designer.data.services.DataGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class DataSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DataGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DataPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DataPackage.FILE:
				sequence_File(context, (File) semanticObject); 
				return; 
			case DataPackage.FOLDER:
				sequence_Folder(context, (Folder) semanticObject); 
				return; 
			case DataPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Resource returns File
	 *     File returns File
	 *
	 * Constraint:
	 *     (name=STRING ext=STRING changed?=BOOL? model+=[EObject|ID]*)
	 */
	protected void sequence_File(ISerializationContext context, File semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Resource returns Folder
	 *     ContainerResource returns Folder
	 *     Folder returns Folder
	 *
	 * Constraint:
	 *     (name=STRING folders+=Folder* files+=File*)
	 */
	protected void sequence_Folder(ISerializationContext context, Folder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Resource returns Project
	 *     ContainerResource returns Project
	 *     Project returns Project
	 *
	 * Constraint:
	 *     (name=STRING files+=File* folders+=Folder*)
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
