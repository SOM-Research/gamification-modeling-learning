/**
 * generated by Xtext 2.10.0
 */
package codeskills.designer.game.game.impl;

import codeskills.designer.game.game.GamePackage;
import codeskills.designer.game.game.Notification;
import codeskills.designer.game.game.Reward;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Reward</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link codeskills.designer.game.game.impl.RewardImpl#getPoints <em>Points</em>}</li>
 *   <li>{@link codeskills.designer.game.game.impl.RewardImpl#getBadgePath <em>Badge Path</em>}</li>
 *   <li>{@link codeskills.designer.game.game.impl.RewardImpl#getNotification <em>Notification</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RewardImpl extends MinimalEObjectImpl.Container implements Reward
{
  /**
   * The default value of the '{@link #getPoints() <em>Points</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoints()
   * @generated
   * @ordered
   */
  protected static final int POINTS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getPoints() <em>Points</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoints()
   * @generated
   * @ordered
   */
  protected int points = POINTS_EDEFAULT;

  /**
   * The default value of the '{@link #getBadgePath() <em>Badge Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBadgePath()
   * @generated
   * @ordered
   */
  protected static final String BADGE_PATH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBadgePath() <em>Badge Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBadgePath()
   * @generated
   * @ordered
   */
  protected String badgePath = BADGE_PATH_EDEFAULT;

  /**
   * The cached value of the '{@link #getNotification() <em>Notification</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNotification()
   * @generated
   * @ordered
   */
  protected Notification notification;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RewardImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.REWARD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getPoints()
  {
    return points;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPoints(int newPoints)
  {
    int oldPoints = points;
    points = newPoints;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, org.eclipse.emf.common.notify.Notification.SET, GamePackage.REWARD__POINTS, oldPoints, points));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getBadgePath()
  {
    return badgePath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBadgePath(String newBadgePath)
  {
    String oldBadgePath = badgePath;
    badgePath = newBadgePath;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, org.eclipse.emf.common.notify.Notification.SET, GamePackage.REWARD__BADGE_PATH, oldBadgePath, badgePath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Notification getNotification()
  {
    return notification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNotification(Notification newNotification, NotificationChain msgs)
  {
    Notification oldNotification = notification;
    notification = newNotification;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, org.eclipse.emf.common.notify.Notification.SET, GamePackage.REWARD__NOTIFICATION, oldNotification, newNotification);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNotification(Notification newNotification)
  {
    if (newNotification != notification)
    {
      NotificationChain msgs = null;
      if (notification != null)
        msgs = ((InternalEObject)notification).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.REWARD__NOTIFICATION, null, msgs);
      if (newNotification != null)
        msgs = ((InternalEObject)newNotification).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.REWARD__NOTIFICATION, null, msgs);
      msgs = basicSetNotification(newNotification, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, org.eclipse.emf.common.notify.Notification.SET, GamePackage.REWARD__NOTIFICATION, newNotification, newNotification));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.REWARD__NOTIFICATION:
        return basicSetNotification(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.REWARD__POINTS:
        return getPoints();
      case GamePackage.REWARD__BADGE_PATH:
        return getBadgePath();
      case GamePackage.REWARD__NOTIFICATION:
        return getNotification();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.REWARD__POINTS:
        setPoints((Integer)newValue);
        return;
      case GamePackage.REWARD__BADGE_PATH:
        setBadgePath((String)newValue);
        return;
      case GamePackage.REWARD__NOTIFICATION:
        setNotification((Notification)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.REWARD__POINTS:
        setPoints(POINTS_EDEFAULT);
        return;
      case GamePackage.REWARD__BADGE_PATH:
        setBadgePath(BADGE_PATH_EDEFAULT);
        return;
      case GamePackage.REWARD__NOTIFICATION:
        setNotification((Notification)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.REWARD__POINTS:
        return points != POINTS_EDEFAULT;
      case GamePackage.REWARD__BADGE_PATH:
        return BADGE_PATH_EDEFAULT == null ? badgePath != null : !BADGE_PATH_EDEFAULT.equals(badgePath);
      case GamePackage.REWARD__NOTIFICATION:
        return notification != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (points: ");
    result.append(points);
    result.append(", badgePath: ");
    result.append(badgePath);
    result.append(')');
    return result.toString();
  }

} //RewardImpl
