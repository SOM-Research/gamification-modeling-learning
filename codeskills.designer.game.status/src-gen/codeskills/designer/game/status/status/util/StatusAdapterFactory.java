/**
 * generated by Xtext 2.10.0
 */
package codeskills.designer.game.status.status.util;

import codeskills.designer.game.status.status.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see codeskills.designer.game.status.status.StatusPackage
 * @generated
 */
public class StatusAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static StatusPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatusAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = StatusPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatusSwitch<Adapter> modelSwitch =
    new StatusSwitch<Adapter>()
    {
      @Override
      public Adapter caseS(S object)
      {
        return createSAdapter();
      }
      @Override
      public Adapter caseGameS(GameS object)
      {
        return createGameSAdapter();
      }
      @Override
      public Adapter caseLevelS(LevelS object)
      {
        return createLevelSAdapter();
      }
      @Override
      public Adapter caseGroupS(GroupS object)
      {
        return createGroupSAdapter();
      }
      @Override
      public Adapter caseAchievementS(AchievementS object)
      {
        return createAchievementSAdapter();
      }
      @Override
      public Adapter caseTaskS(TaskS object)
      {
        return createTaskSAdapter();
      }
      @Override
      public Adapter caseStatus(Status object)
      {
        return createStatusAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link codeskills.designer.game.status.status.S <em>S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see codeskills.designer.game.status.status.S
   * @generated
   */
  public Adapter createSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link codeskills.designer.game.status.status.GameS <em>Game S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see codeskills.designer.game.status.status.GameS
   * @generated
   */
  public Adapter createGameSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link codeskills.designer.game.status.status.LevelS <em>Level S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see codeskills.designer.game.status.status.LevelS
   * @generated
   */
  public Adapter createLevelSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link codeskills.designer.game.status.status.GroupS <em>Group S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see codeskills.designer.game.status.status.GroupS
   * @generated
   */
  public Adapter createGroupSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link codeskills.designer.game.status.status.AchievementS <em>Achievement S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see codeskills.designer.game.status.status.AchievementS
   * @generated
   */
  public Adapter createAchievementSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link codeskills.designer.game.status.status.TaskS <em>Task S</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see codeskills.designer.game.status.status.TaskS
   * @generated
   */
  public Adapter createTaskSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link codeskills.designer.game.status.status.Status <em>Status</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see codeskills.designer.game.status.status.Status
   * @generated
   */
  public Adapter createStatusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //StatusAdapterFactory
