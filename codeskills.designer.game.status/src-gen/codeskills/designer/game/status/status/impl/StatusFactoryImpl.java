/**
 * generated by Xtext 2.10.0
 */
package codeskills.designer.game.status.status.impl;

import codeskills.designer.game.status.status.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class StatusFactoryImpl extends EFactoryImpl implements StatusFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static StatusFactory init()
  {
    try
    {
      StatusFactory theStatusFactory = (StatusFactory)EPackage.Registry.INSTANCE.getEFactory(StatusPackage.eNS_URI);
      if (theStatusFactory != null)
      {
        return theStatusFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new StatusFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatusFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case StatusPackage.S: return createS();
      case StatusPackage.GAME_S: return createGameS();
      case StatusPackage.LEVEL_S: return createLevelS();
      case StatusPackage.GROUP_S: return createGroupS();
      case StatusPackage.ACHIEVEMENT_S: return createAchievementS();
      case StatusPackage.TASK_S: return createTaskS();
      case StatusPackage.STATUS: return createStatus();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public S createS()
  {
    SImpl s = new SImpl();
    return s;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameS createGameS()
  {
    GameSImpl gameS = new GameSImpl();
    return gameS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LevelS createLevelS()
  {
    LevelSImpl levelS = new LevelSImpl();
    return levelS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GroupS createGroupS()
  {
    GroupSImpl groupS = new GroupSImpl();
    return groupS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AchievementS createAchievementS()
  {
    AchievementSImpl achievementS = new AchievementSImpl();
    return achievementS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TaskS createTaskS()
  {
    TaskSImpl taskS = new TaskSImpl();
    return taskS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Status createStatus()
  {
    StatusImpl status = new StatusImpl();
    return status;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatusPackage getStatusPackage()
  {
    return (StatusPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static StatusPackage getPackage()
  {
    return StatusPackage.eINSTANCE;
  }

} //StatusFactoryImpl
