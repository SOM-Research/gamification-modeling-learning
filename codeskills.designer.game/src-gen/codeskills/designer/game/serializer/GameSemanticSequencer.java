/*
 * generated by Xtext 2.10.0
 */
package codeskills.designer.game.serializer;

import codeskills.designer.game.game.Achievement;
import codeskills.designer.game.game.Game;
import codeskills.designer.game.game.GamePackage;
import codeskills.designer.game.game.Group;
import codeskills.designer.game.game.Level;
import codeskills.designer.game.game.Notification;
import codeskills.designer.game.game.Reward;
import codeskills.designer.game.game.Task;
import codeskills.designer.game.services.GameGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GameSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GameGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GamePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GamePackage.ACHIEVEMENT:
				sequence_Achievement(context, (Achievement) semanticObject); 
				return; 
			case GamePackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case GamePackage.GROUP:
				sequence_Group(context, (Group) semanticObject); 
				return; 
			case GamePackage.LEVEL:
				sequence_Level(context, (Level) semanticObject); 
				return; 
			case GamePackage.NOTIFICATION:
				sequence_Notification(context, (Notification) semanticObject); 
				return; 
			case GamePackage.REWARD:
				sequence_Reward(context, (Reward) semanticObject); 
				return; 
			case GamePackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Rewardable returns Achievement
	 *     Achievement returns Achievement
	 *
	 * Constraint:
	 *     (name=ID description=STRING reward=Reward tasks+=Task tasks+=Task*)
	 */
	protected void sequence_Achievement(ISerializationContext context, Achievement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (levels+=Level levels+=Level*)
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rewardable returns Group
	 *     Group returns Group
	 *
	 * Constraint:
	 *     (name=ID description=STRING reward=Reward achievements+=Achievement achievements+=Achievement*)
	 */
	protected void sequence_Group(ISerializationContext context, Group semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rewardable returns Level
	 *     Level returns Level
	 *
	 * Constraint:
	 *     (name=ID description=STRING reward=Reward groups+=Group groups+=Group*)
	 */
	protected void sequence_Level(ISerializationContext context, Level semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Notification returns Notification
	 *
	 * Constraint:
	 *     (message=STRING iconPath=STRING soundPath=STRING)
	 */
	protected void sequence_Notification(ISerializationContext context, Notification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.NOTIFICATION__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.NOTIFICATION__MESSAGE));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.NOTIFICATION__ICON_PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.NOTIFICATION__ICON_PATH));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.NOTIFICATION__SOUND_PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.NOTIFICATION__SOUND_PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNotificationAccess().getMessageSTRINGTerminalRuleCall_3_0(), semanticObject.getMessage());
		feeder.accept(grammarAccess.getNotificationAccess().getIconPathSTRINGTerminalRuleCall_7_0(), semanticObject.getIconPath());
		feeder.accept(grammarAccess.getNotificationAccess().getSoundPathSTRINGTerminalRuleCall_11_0(), semanticObject.getSoundPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reward returns Reward
	 *
	 * Constraint:
	 *     (points=INT badgePath=STRING notification=Notification?)
	 */
	protected void sequence_Reward(ISerializationContext context, Reward semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (description=STRING queryName=STRING)
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.TASK__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.TASK__DESCRIPTION));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.TASK__QUERY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.TASK__QUERY_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTaskAccess().getDescriptionSTRINGTerminalRuleCall_3_0(), semanticObject.getDescription());
		feeder.accept(grammarAccess.getTaskAccess().getQueryNameSTRINGTerminalRuleCall_7_0(), semanticObject.getQueryName());
		feeder.finish();
	}
	
	
}
